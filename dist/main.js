(()=>{"use strict";var e={99:(e,t,n)=>{n.d(t,{Z:()=>p});var r=n(15),o=n.n(r),a=n(645),i=n.n(a),c=n(667),s=n.n(c),l=n(907),u=i()(o()),d=s()(l);u.push([e.id,"*{margin:0;padding:0;box-sizing:border-box}body{background:linear-gradient(rgba(245, 240, 240, 0.8), rgba(245, 240, 240, 0)),url("+d+");background-size:cover}.box{margin:5% 20%}h1{padding-top:10px;color:#00008b}h1 span{color:#638063}h3{font-family:unset;text-transform:capitalize;margin:10px;text-align:center;border-bottom:2px solid #000}.project-box{background:#7a7a69;border:1px solid #3d2268;border-radius:20px;margin-top:10px}#all-projects-content,.project-box ul li{margin:.5% 0}#all-projects-content{margin:5% 20%}#all-projects-content ul li{list-style-type:none;display:flex;justify-content:space-around;align-items:center}#alert{margin:3% 20%;display:none}","",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AAAA,EACE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,KAEE,oHAAA,CACA,qBAAA,CAGF,KACE,aAAA,CAGF,GACE,gBAAA,CACA,aAAA,CAGF,QACE,aAAA,CAGF,GACE,iBAAA,CACA,yBAAA,CACA,WAAA,CACA,iBAAA,CACA,4BAAA,CAGF,aACE,kBAAA,CACA,wBAAA,CACA,kBAAA,CACA,eAAA,CAGF,yCAEE,YAAA,CAGF,sBACE,aAAA,CAGF,4BACE,oBAAA,CACA,YAAA,CACA,4BAAA,CACA,kBAAA,CAGF,OACE,aAAA,CACA,YAAA",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  // background-image: url(./task.jpg);\n  background: linear-gradient(rgba(245, 240, 240, 0.8), rgba(245, 240, 240, 0)), url(./banner.jpg);\n  background-size: cover;\n}\n\n.box {\n  margin: 5% 20%;\n}\n\nh1 {\n  padding-top: 10px;\n  color: darkblue;\n}\n\nh1 span {\n  color: rgb(99, 128, 99);\n}\n\nh3 {\n  font-family: unset;\n  text-transform: capitalize;\n  margin: 10px;\n  text-align: center;\n  border-bottom: 2px solid black;\n}\n\n.project-box {\n  background: rgb(122, 122, 105);\n  border: 1px solid rgb(61, 34, 104);\n  border-radius: 20px;\n  margin-top: 10px;\n}\n\n#all-projects-content,\n.project-box ul li {\n  margin: 0.5% 0;\n}\n\n#all-projects-content {\n  margin: 5% 20%;\n}\n\n#all-projects-content ul li {\n  list-style-type: none;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n#alert {\n  margin: 3% 20%;\n  display: none;\n}\n"],sourceRoot:""}]);const p=u},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}},667:e=>{e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var c=e[o],s=t.base?c[0]+t.base:c[0],l=n[s]||0,u="".concat(s," ").concat(l);n[s]=l+1;var d=i(u),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(a[d].references++,a[d].updater(p)):a.push({identifier:u,updater:f(p,t),references:1}),r.push(u)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,A=0;function f(e,t){var n,r,o;if(t.singleton){var a=A++;n=m||(m=s(t)),r=d.bind(null,n,a,!1),o=d.bind(null,n,a,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var s=c(e,t),l=0;l<n.length;l++){var u=i(n[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=s}}}},907:(e,t,n)=>{e.exports=n.p+"33aabe903298e6c9f8e0.jpg"}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})();var r={};(()=>{n.d(r,{w:()=>m,r:()=>f});var e=n(379),t=n.n(e),o=n(99);function a(e){return{name:e,list:[]}}t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;const i=e=>JSON.parse(localStorage.getItem(e)),c=(e,t)=>{localStorage.setItem("projects",JSON.stringify(e)),localStorage.setItem("currentId",t)},s=e=>{const t=document.querySelector("#all-projects-content");document.querySelector("#all-projects-content").innerHTML="",e.forEach((e=>{const n=document.createElement("div");n.setAttribute("class",` ${e.name}-project project-box`);const r=document.createElement("h3");r.textContent=e.name;const o=document.createElement("ul");o.id=`${e.name}-list`;const a=document.createElement("li");a.textContent="title: cleaning  date:12/02/2021  priority: low",n.append(r,o,a),t.appendChild(n),e.list.forEach((t=>{const n=document.createElement("li"),r=(a=t.duedate,new Date(a).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}));var a;const i=document.createElement("span");i.textContent=t.title;const c=document.createElement("span");c.textContent=r;const s=document.createElement("span");s.textContent=t.priority,n.append(i,c,s);const l=document.createElement("button"),u=document.createElement("button");l.innerHTML='<img src="https://img.icons8.com/fluent-systems-regular/15/000000/edit-property.png" />',l.setAttribute("class"," btn btn-primary"),u.innerHTML='<img src="https://img.icons8.com/material-sharp/15/000000/delete-forever.png" />',u.setAttribute("class","delete-btn btn btn-danger"),n.setAttribute("class","listItem col-md-12"),l.onclick=()=>f(t,e),u.onclick=()=>m(t,e),n.append(l,u),o.appendChild(n)}))}))},l={projects:null==localStorage.getItem("projects")?[]:i("projects"),id:null==localStorage.getItem("currentId")?0:i("currentId")},{projects:u}=l;let{id:d}=l;const p=(e,t,n,r,o,a="Empty")=>("Empty"===a?d+=1:d=a,{id:d,title:e,duedate:t,desc:n,note:r,priority:o}),m=(e,t)=>{const n=u.find((e=>e.name===t.name));n.list=n.list.filter((t=>t.id!==e.id)),c(u,d),s(u)},A=(e,t)=>{e.style.display="block","success"===t?(e.textContent="Task created succesfully!",e.setAttribute("class","box alert alert-success")):"danger"===t&&(e.textContent="Title, Date, and Priority are required fields",e.setAttribute("class","box alert alert-danger"))},f=(e,t)=>{const n=document.querySelector("#inputtitle"),r=document.querySelector("#inputdate"),o=document.querySelector("#inputdescription"),i=document.querySelector("#inputnote"),l=document.querySelector("#inputpriority"),A=document.querySelector("#inputproject");n.value=e.title,r.value=e.duedate,o.value=e.description,i.value=e.note,l.value=e.priority,A.value=t.name;const f=document.createElement("button"),b=document.querySelector("#btn-div");b.innerHTML="",f.setAttribute("class","btn btn-primary"),f.setAttribute("id","tasksubmit"),f.textContent="Modify Task",b.append(f),f.onclick=()=>((e,t)=>{const n=document.querySelector("#inputtitle").value.trim(),r=document.querySelector("#inputdate").value,o=document.querySelector("#inputdescription").value.trim(),i=document.querySelector("#inputnote").value,l=document.querySelector("#inputpriority").value;let A=document.querySelector("#inputproject").value.trim().toLowerCase();A=""===A?"default":A;const f=e.id,b=u.find((e=>e.name===t.name)),g=u.find((e=>e.name===A)),y=b.list.find((e=>e.id===f)),h=p(n,r,o,i,l,f);if(null==g){const e=a(A);e.list.push(h),u.push(e),m(y,b)}else g.name===b.name?g.list=g.list.map((e=>e.id===f?h:e)):(g.list.push(h),m(y,b));return c(u,d),s(u),!1})(e,t)};if(0===u.length){const e=a("default");u.push(e)}else s(u);document.querySelector("#tasksubmit").onclick=()=>{let e=document.querySelector("#inputproject").value.trim().toLowerCase();const t=!(""===e);const n=document.querySelector("#alert");if(t){e=""===e?"default":e;const t=p();if(!(r=[],u.forEach((e=>r.push(e.name))),r).includes(e)){const t=a(e);u.push(t)}o=t,i=e,u.find((e=>e.name===i)).list.push(o),c(u,d),s(u),A(n,"success")}else A(n,"danger");var r,o,i}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,